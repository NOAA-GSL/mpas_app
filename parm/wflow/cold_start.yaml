
workflow:
  attrs:
    realtime: False
    scheduler: "{{ platform.scheduler }}"
  cycledef:
    - attrs:
        group: forecast
      spec: "{{ user.first_cycle.strftime('%Y%m%d%H%M') }} {{ user.last_cycle.strftime('%Y%m%d%H%M') }} {{user.cycle_frequency}}:00:00"
  log:
    value: "{{ user.experiment_dir }}/workflow.log"
  entities:
    EXPERIMENT_CONFIG: "{{user.experiment_dir}}/experiment.yaml"
    LOGDIR: "{{user.experiment_dir}}/log"
    MPAS_APP: "{{ user.mpas_app }}"
    PLATFORM: "{{ user.platform }}"
  tasks:
    task_get_ics_data:
      command: '&MPAS_APP;/scripts/get_external_data.sh'
      account: "{{ platform.account }}"
      partition: "{{ platform.service_partition }}"
      join:
        cyclestr:
          value: '&LOGDIR;/{{ jobname }}_@Y@m@d@H.log'
      walltime: "{{ get_ics_data.execution.walltime }}"
      cores: !int "{{ get_ics_data.execution.cores }}"
      envars:
        cycle:
          cyclestr:
            value: '@Y-@m-@dT@H:@M:@S'
        OUTPUT_PATH:
          cyclestr:
            value: "{{ user.experiment_dir }}/@Y@m@d@H/{{ user.ics.external_model }}"
        DATA_STORES: "{{ user.ics.data_stores }}"
        INPUT_FILE_PATH: "{{ user.ics.get('input_file_path', '')}}"
        FILE_TEMPLATES:
          cyclestr:
            value: "{{ user.ics.get('file_templates', '')}}"
        EXTERNAL_MODEL: "{{ user.ics.external_model }}"
        ICS_or_LBCS: ICS
        TIME_OFFSET_HRS: "{{ user.ics.offset_hours }}"
        MPAS_APP: '&MPAS_APP;'
    task_get_lbcs_data:
      command: '&MPAS_APP;/scripts/get_external_data.sh'
      account: "{{ platform.account }}"
      partition: "{{ platform.service_partition }}"
      join:
        cyclestr:
          value: '&LOGDIR;/{{ jobname }}_@Y@m@d@H.log'
      walltime: "{{ get_lbcs_data.execution.walltime }}"
      cores: !int "{{ get_lbcs_data.execution.cores }}"
      envars:
        cycle:
          cyclestr:
            value: '@Y-@m-@dT@H:@M:@S'
        OUTPUT_PATH:
          cyclestr:
            value: "{{ user.experiment_dir }}/@Y@m@d@H/{{ user.lbcs.external_model }}"
        DATA_STORES: "{{ user.lbcs.data_stores }}"
        INPUT_FILE_PATH: "{{ user.lbcs.get('input_file_path', '') }}"
        FILE_TEMPLATES:
          cyclestr:
            value: "{{ user.lbcs.get('file_templates', '') }}"
        EXTERNAL_MODEL: "{{ user.lbcs.external_model }}"
        ICS_or_LBCS: LBCS
        TIME_OFFSET_HRS: "{{ user.lbcs.offset_hours }}"
        LBC_INTVL_HRS: "{{ user.lbcs.interval_hours }}"
        FCST_LEN: !int "{{ forecast.mpas.length }}" 
        MPAS_APP: '&MPAS_APP;'
    task_ungrib_ics:
      command:
        cyclestr:
          value: 'source &MPAS_APP;/load_wflow_modules.sh &PLATFORM; && &MPAS_APP;/scripts/ungrib.py
            -c &EXPERIMENT_CONFIG;
            --cycle @Y-@m-@dT@H:@M:@S
            --key-path prepare_grib_ics'
      account: "{{ platform.account }}"
      exclusive: "true"
      join:
        cyclestr:
          value: '&LOGDIR;/{{ jobname }}_@Y@m@d@H.log'
      walltime: "{{ prepare_grib_ics.ungrib.execution.batchargs.walltime }}"
      cores: !int "{{ prepare_grib_ics.ungrib.execution.batchargs.cores }}"
      dependency:
        taskdep:
          attrs:
            task: get_ics_data
    task_ungrib_lbcs:
      command:
        cyclestr:
          value: 'source &MPAS_APP;/load_wflow_modules.sh &PLATFORM; && &MPAS_APP;/scripts/ungrib.py
            -c &EXPERIMENT_CONFIG;
            --cycle @Y-@m-@dT@H:@M:@S
            --key-path prepare_grib_lbcs'
      account: "{{ platform.account }}"
      join:
        cyclestr:
          value: '&LOGDIR;/{{ jobname }}_@Y@m@d@H.log'
      walltime: "{{ prepare_grib_lbcs.ungrib.execution.batchargs.walltime }}"
      cores: !int "{{ prepare_grib_lbcs.ungrib.execution.batchargs.cores }}"
      dependency:
        taskdep:
          attrs:
            task: get_lbcs_data
    task_mpas_ics: &mpas_init_task
      command:
        cyclestr:
          value: 'source &MPAS_APP;/load_wflow_modules.sh &PLATFORM; && &MPAS_APP;/scripts/mpas_init.py
            -c &EXPERIMENT_CONFIG;
            --cycle @Y-@m-@dT@H:@M:@S
            --key-path create_ics'
      account: "{{ platform.account }}"
      join:
        cyclestr:
          value: '&LOGDIR;/{{ jobname }}_@Y@m@d@H.log'
      walltime: "{{ create_ics.mpas_init.execution.batchargs.walltime }}"
      cores: !int "{{ create_ics.mpas_init.execution.batchargs.cores }}"
      dependency:
        taskdep:
          attrs:
            task: ungrib_ics
    task_mpas_lbcs:
      command:
        cyclestr:
          value: 'source &MPAS_APP;/load_wflow_modules.sh &PLATFORM; && &MPAS_APP;/scripts/mpas_init.py
            -c &EXPERIMENT_CONFIG;
            --cycle @Y-@m-@dT@H:@M:@S
            --key-path create_lbcs'
      account: "{{ platform.account }}"
      join:
        cyclestr:
          value: '&LOGDIR;/{{ jobname }}_@Y@m@d@H.log'
      walltime: "{{ create_lbcs.mpas_init.execution.batchargs.walltime }}"
      cores: !int "{{ create_lbcs.mpas_init.execution.batchargs.cores }}"
      dependency:
        and:
          taskdep_ics:
            attrs:
              task: mpas_ics
          taskdep_ungrib_lbcs:
            attrs:
              task: ungrib_lbcs
    task_mpas:
      command: 
        cyclestr:
          value: 'source &MPAS_APP;/load_wflow_modules.sh &PLATFORM; && &MPAS_APP;/scripts/mpas.py
            -c &EXPERIMENT_CONFIG;
            --cycle @Y-@m-@dT@H:@M:@S
            --key-path forecast'
      account: "{{ platform.account }}"
      join:
        cyclestr:
          value: '&LOGDIR;/{{ jobname }}_@Y@m@d@H.log'
      walltime: "{{ forecast.mpas.execution.batchargs.walltime }}"
      cores: !int "{{ forecast.mpas.execution.batchargs.cores }}"
      partition: "{{ forecast.mpas.execution.batchargs.get('partition') }}"
      dependency:
        taskdep:
          attrs:
            task: mpas_lbcs
