# The default settings for an MPAS App run.
#
# Several sections contain UW YAML that corresponds to UW Drivers. Documentation
# for those settings can be found here:
#   https://uwtools.readthedocs.io/en/main/sections/user_guide/yaml/components/index.html
#
user:
  cycle_frequency: 12
  driver_validation_blocks:
    - prepare_grib_ics.ungrib
    - prepare_grib_lbcs.ungrib
    - create_ics.mpas_init
    - create_lbcs.mpas_init
    - forecast.mpas
    - post.upp
  experiment_dir: ""
  first_cycle: !!timestamp 2023-09-15T00:00:00
  last_cycle: !!timestamp 2023-09-15T00:00:00
  ics:
    external_model: GFS
    offset_hours: 0
  lbcs:
    external_model: GFS
    interval_hours: 6
    offset_hours: 0
  forecast:
    output_interval: 6
  mesh_label: hrrrv5
  platform: big_computer
  workflow_blocks:
    - cold_start.yaml
    - post.yaml
data:
  # Known locations to mesh_files are updated from parm/machines/*.yaml files
  mesh_files: /path/to/nonstandard/location
platform:
  # Supported scheduler options include Slurm, PBSPro, and LSF
  scheduler: slurm
  service_partition: service
get_ics_data:
  execution:
    cores: 1
    walltime: 00:10:00
  rundir: '{{ user.experiment_dir }}/{{ cycle.strftime("%Y%m%d%H") }}/{{ user.ics.external_model }}'
get_lbcs_data:
  execution:
    cores: 1
    walltime: 00:20:00
  rundir: '{{ user.experiment_dir }}/{{ cycle.strftime("%Y%m%d%H") }}/{{ user.lbcs.external_model }}'
prepare_grib_ics:
  # ungrib settings follow UW Tools driver YAML
  ungrib:
    execution:
      batchargs:
        cores: 1
        walltime: 00:15:00
      envcmds:
        - source {{ user.mpas_app }}/load_wflow_modules.sh {{ user.platform }}
        - conda activate ungrib
      executable: ungrib
    gribfiles:
      interval_hours: 1
      max_leadtime: !int "{{ user.ics.offset_hours }}"
      offset: !int "{{ user.ics.offset_hours }}"
      path: /path/to/user/grib/files
    rundir: '{{ user.experiment_dir }}/{{ cycle.strftime("%Y%m%d%H") }}/ungrib_ics'
    vtable: /path/to/user/vtable
  platform:
    account: '{{ platform.account }}'
    scheduler: '{{ platform.scheduler }}'
prepare_grib_lbcs:
  # ungrib settings follow UW Tools driver YAML
  ungrib:
    execution:
      batchargs:
        cores: 1
        walltime: 00:15:00
      envcmds:
        - source {{ user.mpas_app }}/load_wflow_modules.sh {{ user.platform }}
        - conda activate ungrib
      executable: ungrib
    gribfiles:
      interval_hours: !int '{{ user.lbcs.interval_hours }}'
      max_leadtime: !int "{{ forecast.mpas.length }}" 
      offset: !int "{{ user.lbcs.offset_hours }}"
      path: /path/to/user/grib/files
    rundir: '{{ user.experiment_dir }}/{{ cycle.strftime("%Y%m%d%H") }}/ungrib_lbcs'
    vtable: /path/to/user/vtable
  platform:
    account: '{{ platform.account }}'
    scheduler: '{{ platform.scheduler }}'
create_ics:
  # mpas_init settings follow UW Tools driver YAML
  mpas_init: &mpas_init_config
    boundary_conditions:
      interval_hours: 2
      length: !int "{{ user.ics.offset_hours }}"
      offset: !int "{{ user.ics.offset_hours }}"
      path: "{{ prepare_grib_ics.ungrib.rundir }}"
    execution:
      batchargs:
        cores: 128
        walltime: 01:30:00
      envcmds:
        - ulimit -s unlimited || true
        - module use {{ user.mpas_app }}/modulefiles
        - module load build_{{ user.platform }}_intel
      executable: "{{ user.mpas_app }}/exec/init_atmosphere_model"
      mpiargs:
        - "--ntasks={{ create_ics.mpas_init.execution.batchargs.cores }}"
      mpicmd: srun
    files_to_copy: &mpas_init_files_to_copy
      "{{ user.mesh_label }}.static.nc": "{{ data.mesh_files }}/{{ user.mesh_label }}.static.nc"
      "{{ user.mesh_label }}.graph.info.part.{{create_ics.mpas_init.execution.batchargs.cores }}": '{{ user.experiment_dir }}/{{ user.mesh_label }}.graph.info.part.{{ create_ics.mpas_init.execution.batchargs.cores }}'
      stream_list.atmosphere.diagnostics: "{{ user.mpas_app }}/parm/mpas/stream_list.atmosphere.diagnostics"
      stream_list.atmosphere.output: "{{ user.mpas_app }}/parm/mpas/stream_list.atmosphere.output"
      stream_list.atmosphere.surface: "{{ user.mpas_app }}/parm/mpas/stream_list.atmosphere.surface"
    files_to_link: &mpas_init_files_to_link
      CAM_ABS_DATA.DBL: "{{ user.mpas_app }}/src/MPAS-Model/CAM_ABS_DATA.DBL"
      CAM_AEROPT_DATA.DBL: "{{ user.mpas_app }}/src/MPAS-Model/CAM_AEROPT_DATA.DBL"
      GENPARM.TBL: "{{ user.mpas_app }}/src/MPAS-Model/GENPARM.TBL"
      LANDUSE.TBL: "{{ user.mpas_app }}/src/MPAS-Model/LANDUSE.TBL"
      OZONE_DAT.TBL: "{{ user.mpas_app }}/src/MPAS-Model/OZONE_DAT.TBL"
      OZONE_LAT.TBL: "{{ user.mpas_app }}/src/MPAS-Model/OZONE_LAT.TBL"
      OZONE_PLEV.TBL: "{{ user.mpas_app }}/src/MPAS-Model/OZONE_PLEV.TBL"
      RRTMG_LW_DATA: "{{ user.mpas_app }}/src/MPAS-Model/RRTMG_LW_DATA"
      RRTMG_LW_DATA.DBL: "{{ user.mpas_app }}/src/MPAS-Model/RRTMG_LW_DATA.DBL"
      RRTMG_SW_DATA: "{{ user.mpas_app }}/src/MPAS-Model/RRTMG_SW_DATA"
      RRTMG_SW_DATA.DBL: "{{ user.mpas_app }}/src/MPAS-Model/RRTMG_SW_DATA.DBL"
      SOILPARM.TBL: "{{ user.mpas_app }}/src/MPAS-Model/SOILPARM.TBL"
      VEGPARM.TBL: "{{ user.mpas_app }}/src/MPAS-Model/VEGPARM.TBL"
    namelist:
      base_file: "{{ user.mpas_app }}/src/MPAS-Model/namelist.init_atmosphere"
      update_values: &mpas_init_update_values
        nhyd_model:
          config_init_case: 7
        dimensions:
          config_nsoilcat: 16
          config_nsoillevels: 9
          config_nvegopt: 2
          config_nvertlevels: 59
        data_sources:
          config_fg_interval: !int "{{ user.lbcs.interval_hours * 3600 }}"
          config_met_prefix: FILE
        vertical_grid:
          config_blend_bdy_terrain: true
          config_ztop: 25878.712
          config_specified_zeta_levels: '{{ platform.hrrr_fix }}/L60.txt'
        preproc_stages:
          config_native_gwd_static: false
          config_static_interp: false
        decomposition:
          config_block_decomp_file_prefix: "{{ user.mesh_label }}.graph.info.part."
    rundir: '{{ user.experiment_dir }}/{{ cycle.strftime("%Y%m%d%H") }}/mpas_ics'
    streams:
      input:
        filename_template: "{{ user.mesh_label }}.static.nc"
        input_interval: initial_only
        type: input
        mutable: false
        io_type: "pnetcdf,cdf5"
      output:
        filename_template: "{{ user.mesh_label }}.init.nc"
        output_interval: initial_only
        type: output
        mutable: false
        io_type: "pnetcdf,cdf5"
        packages: initial_conds
        clobber_mode: overwrite
  platform:
    account: '{{ platform.account }}'
    scheduler: '{{ platform.scheduler }}'
create_lbcs:
  # mpas_init settings follow UW Tools driver YAML
  mpas_init:
    <<: *mpas_init_config
    boundary_conditions:
      interval_hours: !int "{{ user.lbcs.interval_hours }}"
      length: !int "{{ forecast.mpas.length }}"
      offset: 0
      path: "{{ prepare_grib_lbcs.ungrib.rundir }}"
    files_to_copy:
      <<: *mpas_init_files_to_copy
      "{{ user.mesh_label }}.init.nc": "{{ create_ics.mpas_init['rundir'] }}/{{ user.mesh_label }}.init.nc"
    namelist:
      base_file: "{{ user.mpas_app }}/src/MPAS-Model/namelist.init_atmosphere"
      update_values:
        <<: *mpas_init_update_values
        nhyd_model:
          config_init_case: 9
    rundir: '{{ user.experiment_dir }}/{{ cycle.strftime("%Y%m%d%H") }}/mpas_lbcs'
    streams:
      input:
        filename_template: "{{ user.mesh_label }}.init.nc"
        input_interval: initial_only
        type: input
        mutable: false
        io_type: "pnetcdf,cdf5"
      surface:
        filename_template: x1.40962.sfc_update.nc
        type: output
        filename_interval: "none"
        packages: sfc_update
        output_interval: "{{ 24 * 3600 }}"
        clobber_mode: overwrite
        mutable: false
      lbc:
        type: output
        filename_template: lbc.$Y-$M-$D_$h.$m.$s.nc
        filename_interval: output_interval
        packages: lbcs
        output_interval: "{{ '%d:00:00' % (user.lbcs.interval_hours) }}"
        mutable: false
  platform:
    account: '{{ platform.account }}'
    scheduler: '{{ platform.scheduler }}'
forecast:
  # mpas settings follow UW Tools driver YAML
  mpas:
    domain: regional
    execution:
      batchargs:
        cores: 800
        walltime: 02:30:00
      envcmds:
        - ulimit -s unlimited || true
        - module use {{ user.mpas_app }}/modulefiles
        - module load build_{{ user.platform }}_intel
      executable: "{{ user.mpas_app }}/exec/atmosphere_model"
      mpiargs:
        - "--ntasks={{ forecast.mpas.execution.batchargs.cores }}"
      mpicmd: srun
    files_to_copy:
      "{{ user.mesh_label }}.init.nc": "{{ create_ics.mpas_init.rundir }}/{{ user.mesh_label }}.init.nc"
      "{{ user.mesh_label }}.graph.info.part.{{forecast.mpas.execution.batchargs.cores }}": '{{ user.experiment_dir }}/{{ user.mesh_label }}.graph.info.part.{{forecast.mpas.execution.batchargs.cores }}'
      stream_list.atmosphere.diagnostics: "{{ user.mpas_app }}/parm/mpas/stream_list.atmosphere.diagnostics"
      stream_list.atmosphere.output: "{{ user.mpas_app }}/parm/mpas/stream_list.atmosphere.output"
      stream_list.atmosphere.surface: "{{ user.mpas_app }}/parm/mpas/stream_list.atmosphere.surface"
    files_to_link:
      <<: *mpas_init_files_to_link
      CCN_ACTIVATE.BIN: "{{ platform.hrrr_fix }}/CCN_ACTIVATE.BIN"
      CCN_ACTIVATE_DATA: "{{ platform.hrrr_fix }}/CCN_ACTIVATE_DATA"
      COMPATIBILITY: "{{ user.mpas_app }}/src/MPAS-Model/src/core_atmosphere/physics/physics_wrf/files/COMPATIBILITY"
      MP_TEMPO_QRacrQS_DATA.DBL: "{{ user.mpas_app }}/src/MPAS-Model/MP_TEMPO_QRacrQS_DATA.DBL"
      MP_TEMPO_freezeH2O_DATA.DBL: "{{ user.mpas_app }}/src/MPAS-Model/MP_TEMPO_freezeH2O_DATA.DBL"
      MP_TEMPO_QIautQS_DATA.DBL: "{{ user.mpas_app }}/src/MPAS-Model/MP_TEMPO_QIautQS_DATA.DBL"
      MP_TEMPO_HAILAWARE_QRacrQG_DATA.DBL: "{{ user.mpas_app }}/src/MPAS-Model/MP_TEMPO_HAILAWARE_QRacrQG_DATA.DBL"
    lateral_boundary_conditions:
      interval_hours: !int "{{ user.lbcs.interval_hours }}"
      offset: 0
      path: "{{ create_lbcs.mpas_init.rundir }}"
    length: 6
    namelist:
      base_file: "{{ user.mpas_app }}/src/MPAS-Model/namelist.atmosphere"
      update_values:
        nhyd_model:
          config_dt: 20.0
        limited_area:
          config_apply_lbcs: true
        decomposition:
          config_block_decomp_file_prefix: "{{ user.mesh_label }}.graph.info.part."
        physics:
          config_sst_update: false
          config_gvf_update: false
          config_sstdiurn_update: false
          config_frac_seaice: true
          config_deepsoiltemp_update: false
          config_radtlw_interval: '00:15:00'
          config_radtsw_interval: '00:15:00'
          config_bucket_update: 'none'
          config_physics_suite: 'hrrrv5'
          config_tempo_aerosolaware: true
          config_tempo_hailaware: true
          config_gwdo_scheme: 'bl_ugwp_gwdo'
          config_lsm_scheme: 'sf_ruc'
          num_soil_layers: 9
          config_pbl_scheme: 'bl_mynnedmf'

    rundir: '{{ user.experiment_dir }}/{{ cycle.strftime("%Y%m%d%H") }}/forecast'
    streams:
      input:
        mutable: false
        type: input
        filename_template: "{{ user.mesh_label }}.init.nc"
        io_type: "pnetcdf,cdf5"
        input_interval: initial_only
      restart:
        mutable: false
        type: "input;output"
        filename_template: "restart.$Y-$M-$D_$h.$m.$s.nc"
        io_type: "pnetcdf,cdf5"
        input_interval: initial_only
        output_interval: "1_00:00:00"
        clobber_mode: overwrite
      output:
        mutable: true
        type: output
        filename_template: "history.$Y-$M-$D_$h.$m.$s.nc"
        output_interval: "{{ '%02d' % user.forecast.output_interval }}:00:00"
        files:
          - stream_list.atmosphere.output
        clobber_mode: overwrite
      diagnostics:
        mutable: true
        type: output
        filename_template: "diag.$Y-$M-$D_$h.$m.$s.nc"
        output_interval: "06:00:00"
        files:
          - stream_list.atmosphere.diagnostics
        clobber_mode: overwrite
      surface:
        mutable: true
        type: input
        filename_template: "x1.40962.sfc_update.nc"
        io_type: "pnetcdf,cdf5"
        filename_interval: "none"
        input_interval: "none"
        files:
          - stream_list.atmosphere.surface
      lbc_in:
        mutable: false
        type: input
        filename_template: "lbc.$Y-$M-$D_$h.$m.$s.nc"
        filename_interval: "input_interval"
        io_type: "pnetcdf,cdf5"
        packages: limited_area
        input_interval: "{{ '%d:00:00' % (user.lbcs.interval_hours) }}"
  platform:
    account: '{{ platform.account }}'
    scheduler: '{{ platform.scheduler }}'
post:
  # combined_files is a simple tasks that concatenates grib files. Please see
  # parm/wflow/post.yaml for information on the task.
  compbined_files:
    name: COMBINED.GrbF{{ '%02d' % (leadtime.total_seconds() // 3600) }}
    path: "{{  user.experiment_dir }}/"
  # mpassit settings are not associated with a UW Driver. Please see the
  # parm/wflow/post.yaml for information on how its runscript is called.
  mpassit:
    execution:
      batchargs:
        walltime: 00:30:00
        cores: 768
        nodes: 24
        native:
          - --exclusive
    fixdir: /path/to/fix/files
    nmldir: '{{ user.mpas_app }}/parm/mpassit'
    parmdir: '{{ user.mpas_app }}/parm/mpassit'
    rundir: '{{ user.experiment_dir }}/{{ cycle.strftime("%Y%m%d%H") }}/mpassit'
  upp:
    # upp settings follow UW Tools driver YAML
    control_file: "{{ user.mpas_app }}/parm/upp/postxconfig-NT-rrfs_mpas.txt"
    execution:
      batchargs:
        walltime: 00:12:00
        nodes: 4
        tasks_per_node: 12
        native:
          - --exclusive
      envcmds:
        - ulimit -s unlimited || true
        - module use {{ user.mpas_app }}/src/UPP/modulefiles
        - module load {{ user.platform }}_intel
      executable: "{{ user.mpas_app }}/exec/upp.x"
      mpicmd: srun
    files_to_copy:
      postxconfig-NT.txt: "{{ user.mpas_app }}/parm/upp/postxconfig-NT-rrfs_mpas.txt"
    files_to_link:
      postcntrl.xml: "{{ user.mpas_app }}/parm/upp/rrfs_mpas_postcntrl.xml"
      rap_micro_lookup.dat: "{{ user.mpas_app }}/parm/upp/rap_micro_lookup.dat"
      nam_micro_lookup.dat: "{{ user.mpas_app }}/parm/upp/nam_micro_lookup.dat"
      hires_micro_lookup.dat: "{{ user.mpas_app }}/parm/upp/hires_micro_lookup.dat"
      params_grib2_tbl_new: "{{ user.mpas_app }}/src/UPP/parm/params_grib2_tbl_new"
      post_avblflds.xml: "{{ user.mpas_app }}/src/UPP/parm/post_avblflds.xml"
      abi_gr.SpcCoeff.bin: "{{ platform.crtm_dir }}/abi_gr.SpcCoeff.bin"
      abi_gr.TauCoeff.bin: "{{ platform.crtm_dir }}/abi_gr.TauCoeff.bin"
      AerosolCoeff.bin: "{{ platform.crtm_dir }}/AerosolCoeff.bin"
      ahi_himawari8.SpcCoeff.bin: "{{ platform.crtm_dir }}/ahi_himawari8.SpcCoeff.bin"
      ahi_himawari8.TauCoeff.bin: "{{ platform.crtm_dir }}/ahi_himawari8.TauCoeff.bin"
      amsre_aqua.SpcCoeff.bin: "{{ platform.crtm_dir }}/amsre_aqua.SpcCoeff.bin"
      amsre_aqua.TauCoeff.bin: "{{ platform.crtm_dir }}/amsre_aqua.TauCoeff.bin"
      CloudCoeff.bin: "{{ platform.crtm_dir }}/CloudCoeff.bin"
      FASTEM4.MWwater.EmisCoeff.bin: "{{ platform.crtm_dir }}/FASTEM4.MWwater.EmisCoeff.bin"
      FASTEM5.MWwater.EmisCoeff.bin: "{{ platform.crtm_dir }}/FASTEM5.MWwater.EmisCoeff.bin"
      FASTEM6.MWwater.EmisCoeff.bin: "{{ platform.crtm_dir }}/FASTEM6.MWwater.EmisCoeff.bin"
      imgr_g11.SpcCoeff.bin: "{{ platform.crtm_dir }}/imgr_g11.SpcCoeff.bin"
      imgr_g11.TauCoeff.bin: "{{ platform.crtm_dir }}/imgr_g11.TauCoeff.bin"
      imgr_g12.SpcCoeff.bin: "{{ platform.crtm_dir }}/imgr_g12.SpcCoeff.bin"
      imgr_g12.TauCoeff.bin: "{{ platform.crtm_dir }}/imgr_g12.TauCoeff.bin"
      imgr_g13.SpcCoeff.bin: "{{ platform.crtm_dir }}/imgr_g13.SpcCoeff.bin"
      imgr_g13.TauCoeff.bin: "{{ platform.crtm_dir }}/imgr_g13.TauCoeff.bin"
      imgr_g15.SpcCoeff.bin: "{{ platform.crtm_dir }}/imgr_g15.SpcCoeff.bin"
      imgr_g15.TauCoeff.bin: "{{ platform.crtm_dir }}/imgr_g15.TauCoeff.bin"
      imgr_insat3d.SpcCoeff.bin: "{{ platform.crtm_dir }}/imgr_insat3d.SpcCoeff.bin"
      imgr_insat3d.TauCoeff.bin: "{{ platform.crtm_dir }}/imgr_insat3d.TauCoeff.bin"
      imgr_mt1r.SpcCoeff.bin: "{{ platform.crtm_dir }}/imgr_mt1r.SpcCoeff.bin"
      imgr_mt1r.TauCoeff.bin: "{{ platform.crtm_dir }}/imgr_mt1r.TauCoeff.bin"
      imgr_mt2.SpcCoeff.bin: "{{ platform.crtm_dir }}/imgr_mt2.SpcCoeff.bin"
      imgr_mt2.TauCoeff.bin: "{{ platform.crtm_dir }}/imgr_mt2.TauCoeff.bin"
      Nalli.IRwater.EmisCoeff.bin: "{{ platform.crtm_dir }}/Nalli.IRwater.EmisCoeff.bin"
      NPOESS.IRice.EmisCoeff.bin: "{{ platform.crtm_dir }}/NPOESS.IRice.EmisCoeff.bin"
      NPOESS.IRland.EmisCoeff.bin: "{{ platform.crtm_dir }}/NPOESS.IRland.EmisCoeff.bin"
      NPOESS.IRsnow.EmisCoeff.bin: "{{ platform.crtm_dir }}/NPOESS.IRsnow.EmisCoeff.bin"
      seviri_m10.SpcCoeff.bin: "{{ platform.crtm_dir }}/seviri_m10.SpcCoeff.bin"
      seviri_m10.TauCoeff.bin: "{{ platform.crtm_dir }}/seviri_m10.TauCoeff.bin"
      ssmi_f13.SpcCoeff.bin: "{{ platform.crtm_dir }}/ssmi_f13.SpcCoeff.bin"
      ssmi_f13.TauCoeff.bin: "{{ platform.crtm_dir }}/ssmi_f13.TauCoeff.bin"
      ssmi_f14.SpcCoeff.bin: "{{ platform.crtm_dir }}/ssmi_f14.SpcCoeff.bin"
      ssmi_f14.TauCoeff.bin: "{{ platform.crtm_dir }}/ssmi_f14.TauCoeff.bin"
      ssmi_f15.SpcCoeff.bin: "{{ platform.crtm_dir }}/ssmi_f15.SpcCoeff.bin"
      ssmi_f15.TauCoeff.bin: "{{ platform.crtm_dir }}/ssmi_f15.TauCoeff.bin"
      ssmis_f16.SpcCoeff.bin: "{{ platform.crtm_dir }}/ssmis_f16.SpcCoeff.bin"
      ssmis_f16.TauCoeff.bin: "{{ platform.crtm_dir }}/ssmis_f16.TauCoeff.bin"
      ssmis_f17.SpcCoeff.bin: "{{ platform.crtm_dir }}/ssmis_f17.SpcCoeff.bin"
      ssmis_f17.TauCoeff.bin: "{{ platform.crtm_dir }}/ssmis_f17.TauCoeff.bin"
      ssmis_f18.SpcCoeff.bin: "{{ platform.crtm_dir }}/ssmis_f18.SpcCoeff.bin"
      ssmis_f18.TauCoeff.bin: "{{ platform.crtm_dir }}/ssmis_f18.TauCoeff.bin"
      ssmis_f19.SpcCoeff.bin: "{{ platform.crtm_dir }}/ssmis_f19.SpcCoeff.bin"
      ssmis_f19.TauCoeff.bin: "{{ platform.crtm_dir }}/ssmis_f19.TauCoeff.bin"
      ssmis_f20.SpcCoeff.bin: "{{ platform.crtm_dir }}/ssmis_f20.SpcCoeff.bin"
      ssmis_f20.TauCoeff.bin: "{{ platform.crtm_dir }}/ssmis_f20.TauCoeff.bin"
      tmi_trmm.SpcCoeff.bin: "{{ platform.crtm_dir }}/tmi_trmm.SpcCoeff.bin"
      tmi_trmm.TauCoeff.bin: "{{ platform.crtm_dir }}/tmi_trmm.TauCoeff.bin"
      v.seviri_m10.SpcCoeff.bin: "{{ platform.crtm_dir }}/v.seviri_m10.SpcCoeff.bin"
    namelist:
      update_values:
        model_inputs:
          filename: "{{ post.mpassit.rundir }}/{{ '%03d' % (leadtime.total_seconds() / 3600) }}/MPAS-A_out.{{ (cycle + leadtime).strftime('%Y-%m-%d_%H.%M.%S') }}.nc"
          ioform: netcdf
          grib: grib2
          datestr: "{{ (cycle + leadtime).strftime('%Y-%m-%d_%H:%M:%S') }}"
          modelname: RAPR
          submodelname: MPAS
          filenameflux: "{{ filename }}"
          filenameflat: "{{ post.upp.files_to_copy['postxconfig-NT.txt'] }}"
        nampgb:
          numx: 2
    rundir: '{{ user.experiment_dir }}/{{ cycle.strftime("%Y%m%d%H") }}/upp/{{ "%03d" % (leadtime.total_seconds() / 3600) }}'
graphics:
  # the graphics task calls a bash run script that runs pygraf
  execution:
    batchargs:
      tasks_per_node: 40
      walltime: "{{ forecast.mpas.execution.batchargs.walltime }}"
      nodes: 1
  config:
    pygraf_path: "{{ user.mpas_app }}/ush/pygraf"
    forecast_length: "{{ forecast.mpas.length }}"
    graphics_output_path: "{{ user.experiment_dir }}/${CYCLE}/pyprd"
    identifier: MPAS Experiment
    image_list: "{{ user.mpas_app }}/ush/pygraf/image_lists/hrrr_subset.yml"
    input_data_location: "{{ user.experiment_dir }}/${CYCLE}/upp"
    input_file_template: COMBINED.GrbF{FCST_TIME:02d},
    ntasks: ${SLURM_CPUS_ON_NODE:-12}
    output_interval: "{{ user.forecast.output_interval }}"
    platform: "{{ user.platform }}"
    specs_file: "{{ user.mpas_app }}/ush/pygraf/adb_graphics/default_specs.yml"
    tiles: full
    wait_between_output: 25
    zip_file_path: "{{ user.experiment_dir }}/${CYCLE}/nclprd"

